---
#- name: Find all instances in the specified region
#  alicloud_instance_facts:
#    instance_names: "{{item}}"
#  with_items:
#    - hzx-prod-3
#    - hzx-prod-1
#  register: all_instances
#- name: "quering current security group  rule"
#  alicloud_security_group:
#     state: list
#     group_id: "{{item.instances[0].group_ids.security_group_id[0]}}"
#  with_items: "{{all_instances.results}}"
- name: install alicli compannents
  pip: 
   name:
     - aliyuncli
     - aliyun-python-sdk-rds
- name: install jq
  yum: name=jq enablerepo=epel
- name: Query current vpc secrity group by vpc ip
  shell: 'aliyuncli ecs DescribeInstances|jq ".Instances.Instance[]|{id: .InstanceId,sg: .SecurityGroupIds.SecurityGroupId[],vip: .VpcAttributes.PrivateIpAddress.IpAddress[]}|select(.vip == \"{{item.VIP}}\")|.sg"'
  register: security_groups
  with_items: "{{ec2s}}"
  loop_control:
     label: "{{item.VIP}}"

- name: authorize security grp by TCP ports
  shell: 'aliyuncli ecs AuthorizeSecurityGroup --IpProtocol {{item.1[0]}} --PortRange {{item.1[1]}}  --SecurityGroupId {{item.0.stdout}}  --SourceCidrIp {{item.1[2]}}'
  with_subelements: 
      - "{{security_groups.results}}"
      - item.ports
  loop_control:
     label: "{{item.0.item.VIP}} {{item.0.stdout}} {{item.1}}"


#- name: list current secrity group rules
#  shell: 'aliyuncli ecs DescribeSecurityGroupAttribute --SecurityGroupId {{item.stdout}} --Direction ingress  --filter Permissions.Permission[*].[IpProtocol,PortRange,SourceCidrIp]  --output text'
#  with_items: "{{security_groups.results}}"
#  register: sg_rules
#  loop_control:
#     label: "{{item.stdout}}"
#- name: print rules
#  debug: var=item.stdout_lines|join(",")|regex_replace('\t',' ')
#  with_items: "{{sg_rules.results}}"
#  loop_control:
#      label: "{{item.stdout_lines}}"
