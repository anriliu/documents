tools:
percona-toolkit
mysql-utilities:replication工具都是针对gtid开启的


Init mysql database without root passwd:
mysqld --initialize-insecure --user=mysql


mysql reset root passwd:
1. create init file which will be excuted while mysql starting up ,it a text file containing the password-assignment statement on a single line:
ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass'; #MySQL 5.7.6 and later
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('MyNewPass');#MySQL 5.7.5 and earlier
start mysql with init file:
sudo -u mysql mysqld --init-file=/tmp/mysql-init &
if not working then try to change init file content as below and restart mysql server:
UPDATE mysql.user
    SET authentication_string = PASSWORD('MyNewPass'), password_expired = 'N'
    WHERE User = 'root' AND Host = 'localhost';
FLUSH PRIVILEGES; 

2.you can also do it with mysql client connection
start mysql server with  --skip-networking and  --skip-grant-tables options:
sudo -u mysql mysqld --skip-networking   --skip-grant-tables
mysql
mysql>FLUSH PRIVILEGES;
mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass'; #MySQL 5.7.6 and later
mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('MyNewPass'); #MySQL 5.7.5 and earlier
if not working then try below sql:
UPDATE mysql.user SET authentication_string = PASSWORD('MyNewPass')
WHERE User = 'root' AND Host = 'localhost';
FLUSH PRIVILEGES;

mysql on hand monitoring tools innotop,mytop


Find out locked tables
SHOW OPEN TABLES; 

Find out session lock for innodb or run innotop
show engine innodb status;

HOW VARIABLES LIKE 'validate_password%';
SET GLOBAL  validate_password_policy='LOW';
ALTER USER 'script'@'localhost' PASSWORD EXPIRE NEVER；
ALTER USER 'jeffrey'@'localhost' 
  IDENTIFIED BY 'new_password' REQUIRE SSL WITH MAX_CONNECTIONS_PER_HOUR 20;
ALTER USER 'jeffrey'@'localhost'
  IDENTIFIED WITH mysql_native_password
             BY 'mypass' PASSWORD EXPIRE INTERVAL 180 DAY;
ALTER USER USER() 
IDENTIFIED BY 'auth_string';This syntax enables changing your own password without naming your account literally.

add below to my.cnf:
default_password_lifetime=0
validate_password_policy='LOW'; #if you install validate_password plugin by INSTALL PLUGIN validate_password SONAME 'validate_password.so';


add new user  
CREATE USER 'finley'@'localhost' IDENTIFIED BY 'some_pass';  
GRANT ALL PRIVILEGES ON *.* TO 'finley'@'localhost'    WITH GRANT OPTION;  

delete user  
DROP USER 'jeffrey'@'localhost';  

list user privileges  
SHOW GRANTS FOR 'admin'@'localhost';

The MySQL server maintains many status variables that provide information about its operation. 
SHOW [GLOBAL | SESSION] STATUS: 
SUM(Com_xxx) + Qcache_hits
= Questions + statements executed within stored programs
= Queries


performance_schema database: 统计系统信息
包含了current events, event histories and summaries, object instances, and setup (configuration) information. 
默认没有开启所有instruments and consumers 所以performance schema不会搜集所有时间信息。运行下面的语句来开启:
mysql> UPDATE setup_instruments SET ENABLED = 'YES', TIMED = 'YES';
mysql> UPDATE setup_consumers SET ENABLED = 'YES';
events_waits_current 保存了当前数据库的任务状态
events_waits_history contains most recent 10 events per thread 
events_waits_history_long table contains most recent 10,000 events, 
Summary tables provide aggregated information for all events over time. 
Instance tables document what types of objects are instrumented.
Setup tables are used to configure and display monitoring characteristics. 
To control whether events are collected for an instrument, set its ENABLED value to YES or NO in setup_instruments table,setup_instruments lists the set of instruments for which events can be collected and shows which of them are enabled.
The Performance Schema uses collected events to update tables in the performance_schema database, which act as “consumers” of event information, setup_consumers table lists the available consumers and which are enabled
To control an instrument at server startup, use an option of this form:
--performance-schema-instrument='instrument_name=value'
To disable all instruments, use this option:
--performance-schema-instrument='%=OFF'
也可以通过在线更改setup表的方式更改，The setup_instruments and setup_consumers tables list the instruments for which events can be collected and the types of consumers for which event information actually is collected.
如果你有多个Performance Schema 配置必须在运行的状态下更改，你也可以将语句写在文件里，然后通过 --init-file=file_name来加载。

Performance Schema Event Filtering:
1.Pre-filtering.  This is done by modifying Performance Schema configuration so that only certain types of events are collected from producers, and collected events update only certain consumers. 
To configure pre-filtering at the producer stage, several tables can be used:
a.setup_instruments 
To configure pre-filtering at the consumer stage, modify the setup_consumers table,setup_consumers also implicitly affects event production. If a given event will not be sent to any destination (that is, will not be consumed), the Performance Schema does not produce it.
Modifications to any of these tables affect monitoring immediately, with some exceptions:
Modifications to some instruments in the setup_instruments table are effective only at server startup; changing them at runtime has no effect. This affects primarily mutexes, conditions, and rwlocks in the server, although there may be other instruments for which this is true. This restriction is lifted as of MySQL 5.7.12.
修改了performance schema配置并不会刷新history tables，你需要等待新的记录覆盖旧的或者 TRUNCATE TABLE to empty the history tables.
mysql> UPDATE setup_instruments       
       SET ENABLED = IF(NAME LIKE 'wait/io/file/%', 'NO', 'YES');
mysql> UPDATE setup_instruments
       SET ENABLED = CASE WHEN NAME LIKE '%/mysys/%' THEN 'YES' ELSE 'NO' END;
b.setup_objects 
这个表可以设置监控特定的表还有存储程序对象（EVENT,FUNCTION,PROCEDURE,TRIGGER）
For table-related events, the Performance Schema combines the contents of setup_objects with setup_instruments to determine whether to enable instruments and whether to time enabled instruments:
For stored program objects, the Performance Schema takes the ENABLED and TIMED columns directly from the setup_objects row. There is no combining of values with setup_instruments.
c.threads
For foreground threads (resulting from client connections), the initial values of the INSTRUMENTED and HISTORY columns in threads table rows are determined by whether the user account associated with a thread matches any row in the setup_actors table. The values come from the ENABLED and HISTORY columns of the matching setup_actors table row.
For background threads, there is no associated user. INSTRUMENTED and HISTORY are YES by default and setup_actors is not consulted.
d.setup_actors 
Modifications to the setup_actors table affect only foreground threads created subsequent to the modification, not existing threads. To affect existing threads, modify the INSTRUMENTED and HISTORY columns of threads table rows.
When the Performance Schema checks for a match for each new foreground thread in setup_actors, it tries to find more specific matches first, using the USER and HOST columns (ROLE is unused)
2.Post-filtering.  This involves the use of WHERE clauses in queries that select information from Performance Schema tables, to specify which of the available events you want to see. Post-filtering is performed on a per-user basis because individual users select which of the available events are of interest.

通过下面的方法可以获取和老版本中show profiles相同sql执行各个阶段消耗时间的信息。Performance Schema 中时间的单位是 picoseconds (trillionths of a second) 万亿分之一秒
1.为了不影响系统的性能我们可以通过setup_actors表设置filter来限制需要统计的时间信息。可以通过限制host,user和account
mysql> UPDATE performance_schema.setup_actors SET ENABLED = 'NO', HISTORY = 'NO'
       WHERE HOST = '%' AND USER = '%';
mysql> INSERT INTO performance_schema.setup_actors (HOST,USER,ROLE,ENABLED,HISTORY)
       VALUES('localhost','test_user','%','YES','YES');
2.Ensure that statement and stage instrumentation is enabled
mysql> UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES'
       WHERE NAME LIKE '%statement/%';
mysql> UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES'
       WHERE NAME LIKE '%stage/%';
3.Ensure that events_statements_* and events_stages_* consumers are enabled.
mysql> UPDATE performance_schema.setup_consumers SET ENABLED = 'YES'
       WHERE NAME LIKE '%events_statements_%';
mysql> UPDATE performance_schema.setup_consumers SET ENABLED = 'YES'
       WHERE NAME LIKE '%events_stages_%';
4.Under the user account you are monitoring, run the statement that you want to profile. 
mysql> SELECT * FROM employees.employees WHERE emp_no = 10001;
5.Identify the EVENT_ID of the statement by querying the events_statements_history_long table.
mysql> SELECT EVENT_ID, TRUNCATE(TIMER_WAIT/1000000000000,6) as Duration, SQL_TEXT
       FROM performance_schema.events_statements_history_long WHERE SQL_TEXT like '%10001%';
6.Query the events_stages_history_long table to retrieve the statement's stage events. 
mysql> SELECT event_name AS Stage, TRUNCATE(TIMER_WAIT/1000000000000,6) AS Duration
       FROM performance_schema.events_stages_history_long WHERE NESTING_EVENT_ID=31;


character set： 编码方式
collation: 即比对方法,用于指定数据集如何排序，以及字符串的比对规则
mysql 有两个支持 unicode 的 character set:
1. ucs2: 使用 16 bits 来表示一个 unicode 字符
2. utf8: 使用 1~3 bytes 来表示一个 unicode 字符
show collation;  
collation 名字的规则可以归纳为这两类：
1. <character set>_<language/other>_<ci/cs>#ci 是 case insensitive 的缩写， cs 是 case sensitive 的缩写
2. <character set>_bin
在 ci 的 collation 下，比对时区分大小写：
select * from pet where name = binary 'whistler';

zabbix monitor slave status(if the returned value is less than 2 then there is a slave error there)
the db user  for zabbbix need  REPLICATION CLIENT,SELECT pprivileges
UserParameter=mysql.slave,HOME=/var/lib/zabbix mysql -e 'SHOW SLAVE STATUS\G' | egrep '(Slave_IO_Running|Slave_SQL_Running):' | awk -F: 'BEGIN{a=0}{if (($$1 ~ /.*Slave_IO_Running/ && $$2 ~ /Yes.*/) || ($$1 ~ /.*Slave_SQL_Running/ && $$2 ~ /Yes.*/)){a++;}}END{print a;}'


有用的命令命令
统计每秒慢查询数量
awk '/^# Time/{print $3,$4,c;c=0}/^# User/{c++}' mysql_slow.log
查看mysql连接状态信息
mysql -e 'show processlist\G'|grep State:|sort |uniq -c|sort -nr
当前查询量和正在执行查询的线程数
mysqladmin ext -i1 |awk '/Queries/{q=$4-qp;qp=$4}/Threads_connected/{tc=$4}/Threads_running/{printf "%5d %5d %5d\n",q,tc,$4}'
mysqladmin ext -i1 -pPassw0rd |awk '/Queries/{q=$4-qp;qp=$4}/Threads_connected/{tc=$4}/Threads_running/{printf "%5d %5d %5d\n",q,tc,$4 >>"query.log";close("query.log")}'
上面这些统计的数据都可以通过gnuplot来画图展示

Grant也可以使用_和%通配符可以只用\转义：
GRANT ... ON `foo_%`.* TO


CHECKSUM TABLE table_name也可以用来对比slave和master的两个表是否一致
