TCP port 2377 for cluster management communications
TCP and UDP port 7946 for communication among nodes
UDP port 4789 for overlay network traffic
ip protocol 50 (ESP) traffic is allowed if need create an overlay network with encryption

docker swarm mode的host拥有三个网络，一个是bridge，两个overlay，container至少有2个overlay网络,一个是swarm用来做lb和routing mesh的ingress，还有一个是用户自定义的overlay,不同network namespace之间相同subnet的连接都是通过创建veth pair来实现的,不同host之间的相同overlay是通过创建vxlan来连接的。
bridge 一般名为docker_gwbridge，作为默认网关用来给本机的containers访问外部网络,每个container都会有一个interface通过veth pair连接到这个bridge上。
用户自定义的overlay网络用来swarm内部同一网络的containers相互通信,就是这个IP在swarm engine内部有对应的dns记录。
ingree overlay一般名字为ingress，用来做routing mesh和load balance,这个网络只有当暴露了service的端口时,对应的container中才会创建属于这个网络的接口,并通过veth pair 连接到host的ingress网络的namespace中,host通过iptables 创建nat规则，重定向外部访问此service所暴露端口的流量到ingress namespace中的bridge network ip,再通过ipvs的规则转发到各个container的ingress 网络IP
可以通过nsenter --net=/var/run/docker/netns/ingress_sbox ipvsadm --list 查看
可以自定义ingress和docker_gwbridge
首先通过docker network rm删除现有的ingress和docker_gwbridge然后再创建
docker network create \
--subnet 10.11.0.0/16 \
--opt com.docker.network.bridge.name=docker_gwbridge \
--opt com.docker.network.bridge.enable_icc=false \
--opt com.docker.network.driver.mtu=1500
--opt com.docker.network.bridge.enable_ip_masquerade=true docker_gwbridge

docker network create \
  --driver overlay \
  --ingress \
  --subnet=10.12.0.0/16 \
  --gateway=10.12.0.2 \
  --opt com.docker.network.mtu=1200 my_ingress


Bypass the routing mesh
如果你不想使用 routing mesh，想要在访问特定host ip时候就访问他上面的container那么可以在创建service的时候指定mode=host参数：
docker service create --name dns-cache \
  --publish published=53,target=53,protocol=udp,mode=host \
  --mode global \
  dns-cache
这种一般用来和外部load balancer结合使用
使用外部load balancer时候也经常可能会结合DNS round-robin:
DNS round-robin is useful in cases where you want to use your own load balancer, such as HAProxy. To configure a service to use DNSRR, use the flag --endpoint-mode dnsrr when creating a new service or updating an existing one.
If you configure a service to use DNS round-robin (DNSRR) service discovery, there is not a single virtual IP. Instead, Docker sets up DNS entries for the service such that a DNS query for the service name returns a list of IP addresses, and the client connects directly to one of these.


volume-nocopy
 By default, if you attach an empty volume to a container, and files or directories already existed at the mount-path in the container (dst), the Engine copies those files and directories into the volume, allowing the host to access them. Set volume-nocopy to disables copying files from the container’s filesystem to the volume and mount the empty volume. A value is optional
docker service create --mount 'type=volume,src=test,volume-driver=local,dst=/data/,volume-nocopy=true,volume-opt=type=nfs,volume-opt=device=:/nfs/test,volume-opt=o=addr=nfs.my.corporate.network' --name test --entrypoint=ls volume:defined-with-copy /data/



cmd
entrypoint
docker run --entrypoint /bin/bash image_name -c cmd #用来替换image默认的entrypoint 并执行自己想要的命令，注意，image_name后面的内容会直接传到container不做修改，所以不能随意加引号。
