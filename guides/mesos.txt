download binary package from
https://open.mesosphere.com/downloads/mesos/
or
rpm -Uvh http://repos.mesosphere.com/el/6/noarch/RPMS/mesosphere-el-repo-6-3.noarch.rpm
rpm -Uvh http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-3.noarch.rpm
yum -y install --enablerepo=mesosphere mesos

master需要开启5050端口，slave开启5051端口
mesos-master --hostname=172.18.91.139 --ip=172.18.91.139 --hostname_lookup=false --work_dir=/var/lib/mesos/ --log_dir=/var/log/mesos/
mesos-agent --master=172.18.91.139:5050 --containerizers=docker,mesos --work_dir=/var/lib/mesos-slave --switch_user=false --hostname_lookup=false --log_dir=/var/log/mesos/ --resources='cpus(*):2;mem(*):1000;ports(*):[1000-65535];disk(*):65526'
默认disk是所有的空余disk,ports是31000-32000,ports resources在创建docker做 port mapping的时候需要用到

mesos can also use environment variable MESOS_OPTION_NAME as it's option

http://172.18.91.139:5050/slaves 查看所有slave的信息
curl -XPOST http://172.18.91.139:5050/teardown -d 'frameworkId=0164eece-8f5c-4f9b-963e-b452facf036c-0205' #删除一个正在运行的firmwork并删除所有与之相关的tasks

health check 可以设置为Mesos-level 或者 Marathon-level
Marathon-level 的health check都是在marathon上执行的
Mesos-level health check是在运行task的mesos agent上执行的,所以更合适，它有一下几种类型:
MESOS_HTTP, MESOS_HTTPS, MESOS_TCP, and COMMAND
可以通过portIndex和port来设置health check的端口，如果不设置默认是portIndex 0，即是环境变量PORT0的值
{
  "path": "/api/health",
  "port": 8080,
  "protocol": "MESOS_HTTP",
  "gracePeriodSeconds": 300,
  "intervalSeconds": 60,
  "timeoutSeconds": 20,
  "maxConsecutiveFailures": 3
}

 /metrics/snapshot  可以查看mesos的各项指标，可以用来监控，可以根据下面几个指标来做简单的报警：
master/uptime_secs is low
The master has restarted.
master/uptime_secs < 60 for sustained periods of time
The cluster has a flapping master node.
master/tasks_lost is increasing rapidly
Tasks in the cluster are disappearing. Possible causes include hardware failures, bugs in one of the frameworks, or bugs in Mesos.
master/slaves_active is low
Agents are having trouble connecting to the master.
master/cpus_percent > 0.9 for sustained periods of time
Cluster CPU utilization is close to capacity.
master/mem_percent > 0.9 for sustained periods of time
Cluster memory utilization is close to capacity.
master/elected is 0 for sustained periods of time
No master is currently elected.


To install marathon
yum -y install --enablerepo=mesosphere  marathon
default marathon need zookeeper to store data and ha election if you only have one host then you can run marathon with below options:
--internal_store_backend mem --disable_ha

marathon can also use environment variable MARATHON_OPTION_NAME as it's option
mesos（marathon）启动一个docker overlay network的container,只需要将docker的network选择为“BRIDGE”然后将自定义docker参数的值设置为“{“key”: “net”, “value”: “your-overlay-network”}”即可,这是因为docker run的命令航只会接收最后一个--network 参数

http://172.18.91.139:8080/v2/queue  查看all the tasks queued up or waiting to be scheduled
curl -H "Accept: text/event-stream"  <MARATHON_HOST>:<MARATHON_PORT>/v2/events #订阅marathon上all API requests and scaling events

to use Private Docker Registry you must do below:
1.docker login some.docker.host.com
2.cd ~&&tar -czf docker.tar.gz .docker
3.cp docker.tar.gz /etc/  on all hosts which you will start you app on
4.start the app wit uris parmeter:
{  
  "id": "/some/name/or/id",
  "cpus": 1,
  "mem": 1024,
  "instances": 1,
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "some.docker.host.com/namespace/repo",
      "network": "HOST"
    }
  },
  "uris":  [
      "file:///etc/docker.tar.gz"
  ]
}

get submited application:
curl -XGET http://172.18.91.139:8080/v2/apps #you can list one app by adding id=name filter

create new app:
curl -XPOST http://172.18.91.139:8080/v2/apps  -H 'Content-Type: application/json' -d '
{
  "id": "/foo",
  "instances": 2,
  "cmd": "sleep 1000",
  "cpus": 0.1,
  "disk": 0,
  "mem": 16,
  "acceptedResourceRoles": [
    "mesos_role"
  ],
  "args": [
    "sleep",
    "100"
  ],
  "backoffFactor": 1.15,
  "backoffSeconds": 1,
  "constraints": [
    [
      "hostname",
      "LIKE",
      "srv2.*"
    ]
  ],
  "container": {
    "docker": {
      "forcePullImage": false,
      "image": "mesosphere:marathon/latest",
      "network": "BRIDGE",
      "parameters": [
        {
          "key": "name",
          "value": "kdc"
        }
      ],
      "portMappings": [
        {
          "containerPort": 80,
          "hostPort": 0,
          "protocol": "tcp",
          "servicePort": 10019,
          "name": "http",
          "labels": {
            "vip": "192.168.0.1:80"
          }
        }
      ],
      "privileged": false
    },
    "type": "DOCKER",
    "volumes": [
      {
        "containerPath": "/docker_storage",
        "hostPath": "/hdd/tools/docker/registry",
        "mode": "RW"
      }
    ]
  },
  "dependencies": [
    "/prod/group"
  ],
  "env": {
    "XPS1": "Test",
    "XPS2": "Rest",
    "PASSWORD": {
      "secret": "/db/password"
    }
  },
  "executor": "",
  "healthChecks": [
    {
      "gracePeriodSeconds": 300,
      "ignoreHttp1xx": false,
      "intervalSeconds": 20,
      "maxConsecutiveFailures": 3,
      "path": "/",
      "portIndex": 0,
      "protocol": "HTTP",
      "timeoutSeconds": 20
    }
  ],
  "readinessChecks": [
    {
      "name": "myReadyCheck",
      "protocol": "HTTP",
      "path": "/v1/plan",
      "portName": "http",
      "intervalSeconds": 10,
      "timeoutSeconds": 3,
      "httpStatusCodesForReady": [
        200
      ],
      "preserveLastResponse": true
    }
  ],
  "labels": {
    "owner": "zeus",
    "note": "Away from olympus"
  },
  "maxLaunchDelaySeconds": 3600,
  "ipAddress": {
    "discovery": {
      "ports": [
        {
          "number": 8080,
          "name": "rest-endpoint",
          "protocol": "tcp"
        }
      ]
    },
    "groups": [
      "dev"
    ],
    "labels": {
      "environment": "dev"
    }
  },
  "portDefinitions": [
    {
      "port": 0,
      "protocol": "tcp",
      "name": "http",
      "labels": {
        "vip": "192.168.0.1:80"
      }
    }
  ],
  "requirePorts": false,
  "upgradeStrategy": {
    "maximumOverCapacity": 1,
    "minimumHealthCapacity": 1
  },
  "fetch": [
    {
      "uri": "https://foo.com/setup.py"
    },
    {
      "uri": "https://foo.com/archive.zip",
      "executable": false,
      "extract": true,
      "cache": true,
      "destPath": "newname.zip"
    }
  ],
  "user": "root",
  "secrets": {
    "secret1": {
      "source": "/db/password"
    },
    "secret3": {
      "source": "/foo2"
    }
  },
  "taskKillGracePeriodSeconds": 30,
  "tty": true
}'

update existing apps:
curl -XPUT  http://172.18.91.139:8080/v2/apps -H 'Content-Type: application/json' -d'
[
  {
    "id": "/test/sleep60",
    "cmd": "sleep 60",
    "cpus": 0.3,
    "instances": 2,
    "mem": 9,
    "dependencies": [
      "/test/sleep120",
      "/other/namespace/or/app"
    ]
  },
  {
    "id": "/test/sleep120",
    "cmd": "sleep 120",
    "cpus": 0.3,
    "instances": 2,
    "mem": 9
  }
]'

get task for a specified app:
curl http://172.18.91.139:8080/v2/apps/{app_id}/tasks


port-mapping:
A port-mapping declares a container-port for an application, possibly linking that container-port to a host-port and service-port. Marathon communicates container-port/host-port links (aka “mappings”) to Mesos when launching instances of the application. Port-mappings are used with both container and container/bridge networking. Marathon ignores the value of requirePorts when interpreting a port-mapping.
The special containerPort value of 0 tells Marathon to internally assign the (eventually) allocated host-port to containerPort.
The special hostPort value of 0 tells Marathon to select any host-port from a Mesos resource offer.
The special servicePort value of 0 tells Marathon to select any service-port from the configured service-port range.#will be used by marathon-lb listening
在marathon-lb和mesos slave运行在相同的机器时，最好是设置hostPort=0这样就可以避免端口冲突




Marathon-lb is a tool for managing HAProxy, by consuming Marathon's app state and it can do teamplating by reading marathon app's labels
docker run -e PORTS=9090 mesosphere/marathon-lb sse  --marathon http://localhost:8080 --auth-credentials=admin:password --ssl-certs /etc/ssl/site1.co,/etc/ssl/site2.co --health-check --strict-mode --group ha-proxy
--group 定义了marathon 上只有存在label为HAPROXY_GROUP=ha-proxy的app才会被此marathon-lb来expose
下面使一些定义到marathon app 的label上来做template haproxy配置的label(如果需要定义多个都可以通过在label name中间加上n来实现,n对应的是service port index marathon-lb会在内部的haproxy创建于service port对应的监听):
可以同时定义多个HAPROXY_{n}_GROUP label来达到一个app被不同marathon-lb expose的目的。
HAPROXY_{n}_VHOST 标签是用来创建virtual host的，vhost默认除了会被expose到servierport还会被额外expose on ports 80 and 443
HAPROXY_{n}_PORT 可以用来覆盖app定义的service port

You can access the HAProxy statistics via :9090/haproxy?stats, and you can retrieve the current HAProxy config from the :9090/_haproxy_getconfig endpoint.



mesos zabbix monitoring script:

#!/bin/env bash
[ -n $2 ]||{ echo "uasge: ./mesos meosip key"&&exit 255 ; }

curl http://$1/metrics/snapshot -s |jq .[\"master/$2\"]
