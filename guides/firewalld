
/etc/firewalld/


To get a text display of the state of firewalld, enter the following command:
firewall-cmd --state

To view the list of active zones with a list of the interfaces currently assigned to them, enter the following command:
firewall-cmd --get-active-zones

To find out the zone that an interface, for example, em1, is currently assigned to, enter the following command:
firewall-cmd --get-zone-of-interface=em1

To find out all the interfaces assigned to a zone, for example, the public zone, enter the following command as root:
firewall-cmd --zone=public --list-interfaces

To find out all the settings of a zone, for example, the public zone, enter the following command as root:
firewall-cmd --zone=public --list-all

To view the list of services currently loaded, enter the following command as root:
firewall-cmd --get-services
This lists the names of the predefined services loaded from /usr/lib/firewalld/services/ as well as any custom services that are currently loaded. Note that the configuration files themselves are named service-name.xml.

To list the custom services that have been created but not loaded, use the following command as root:
firewall-cmd --permanent --get-services
This lists all services, including custom services configured in /etc/firewalld/services/, even if they are not yet loaded.

To show the settings of the ftp service, use the following command as root:
firewall-cmd --info-service=ftp
To view the settings in permanent configuration mode, use the --permanent option.

To start dropping all incoming and outgoing packets, enter the following command as root:
firewall-cmd --panic-on

To start passing incoming and outgoing packets again, enter the following command as root:
firewall-cmd --panic-off

To find out if panic mode is enabled or disabled, enter the following command:
firewall-cmd --query-panic

To reload the firewall without interrupting user connections (without losing state information), enter the following command:
firewall-cmd --reload

To reload the firewall and interrupt user connections, discarding state information, enter the following command as root:
firewall-cmd --complete-reload

To add an interface to a zone (for example, to add em1 to the public zone), enter the following command as root:
firewall-cmd --zone=public --add-interface=em1
To make this setting persistent, repeat the commands adding the --permanent option.

To add an interface to a zone by editing the ifcfg-em1 configuration file (for example, to add em1 to the work zone), add the following line to ifcfg-em1 as root:
ZONE=work

Configuring the Default Zone by Editing the firewalld Configuration File
 /etc/firewalld/firewalld.conf
DefaultZone=home
then run firewall-cmd --reload

To set the default zone (for example, to public), enter the following command as root:
firewall-cmd --set-default-zone=public

To list all open ports for a zone (for example, dmz), enter the following command as root:
firewall-cmd --zone=dmz --list-ports
Note that this will not show ports opened as a result of the --add-services command.

To add a port to a zone (for example, to allow TCP traffic to port 8080 to the dmz zone), enter the following command as root:
firewall-cmd --zone=dmz --add-port=8080/tcp
To make this setting persistent, repeat the command adding the --permanent option.

To add a range of ports to a zone (for example, to allow the ports from 5060 to 5061 to the public zone, enter the following command as root:
firewall-cmd --zone=public --add-port=5060-5061/udp
To make this setting persistent, repeat the command adding the --permanent option.

To list all open ports for a zone (dmz, for example), enter the following command as root:
firewall-cmd --zone=dmz --list-protocols
Note that this command does not show protocols opened as a result of the firewall-cmd --add-services command.

To add a protocol to a zone (for example, to allow ESP traffic to the dmz zone), enter the following command as root:
firewall-cmd --zone=dmz --add-protocol=esp
To make this setting persistent, add the --permanent option.

To list all open source ports for a zone (for example, the dmz zone), enter the following command as root:
firewall-cmd --zone=dmz --list-source-ports
Note that this command does not show source ports opened as a result of the firewall-cmd --add-services command.

To add a source port to a zone (for example, to allow TCP traffic from port 8080 to the dmz zone), use the following command as root:
firewall-cmd --zone=dmz --add-source-port=8080/tcp

To add a range of source ports to a zone (for example, to allow the ports from 5060 to 5061 to the public zone), enter the following command as root:
firewall-cmd --zone=public --add-source-port=5060-5061/udp

To add a service to a zone (for example, to allow SMTP to the work zone), enter the following command as root:
firewall-cmd --zone=work --add-service=smtp

To remove a service from a zone (for example, to remove SMTP from the work zone), enter the following command as root:
firewall-cmd --zone=work --remove-service=smtp
To make this change persistent, repeat the command adding the --permanent option. This change will not break established connections. If that is your intention, you can use the --complete-reload option, but this will break all established connections — not just for the service you have removed.

To view the default zone files, enter the following command as root:
ls /usr/lib/firewalld/zones/
These files must not be edited. They are used by default if no equivalent file exists in the /etc/firewalld/zones/ directory.
To view the zone files that have been changed from the default, enter the following command as root:
ls /etc/firewalld/zones/



Configuring IP Address Masquerading
To enable IP masquerading, enter the following command as root:
firewall-cmd --zone=external --add-masquerade
To make this setting persistent, repeat the command adding the --permanent option.

To disable IP masquerading, enter the following command as root:
firewall-cmd --zone=external --remove-masquerade
To make this setting persistent, repeat the command adding the --permanent option.

To forward inbound network packets from one port to an alternative port or address, first enable IP address masquerading for a zone (for example, external), by entering the following command as root:
firewall-cmd --zone=external --add-masquerade
To forward packets to a local port (a port on the same system), enter the following command as root:
firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toport=3753
In this example, the packets intended for port 22 are now forwarded to port 3753. The original destination port is specified with the port option. This option can be a port or port range, together with a protocol. The protocol, if specified, must be one of either tcp or udp. The new local port (the port or range of ports to which the traffic is being forwarded to) is specified with the toport option. To make this setting persistent, repeat the commands adding the --permanent option.

To forward packets to another IPv4 address, usually an internal address, without changing the destination port, enter the following command as root:
firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toaddr=192.0.2.55

To forward packets to another port at another IPv4 address, usually an internal address, enter the following command as root:
firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toport=2055:toaddr=192.0.2.55

The configuration settings for firewalld are stored in XML files in the /etc/firewalld/ directory. Do not edit the files in the /usr/lib/firewalld/ directory (the files define the default settings). You will need root user permissions to view and edit the XML files. The XML files are explained in three man pages:
firewalld.icmptype(5) man page — Describes XML configuration files for ICMP filtering.
firewalld.service(5) man page — Describes XML configuration files for firewalld service.
firewalld.zone(5) man page — Describes XML configuration files for firewalld zone configuration.

It is possible to add and remove chains during runtime by using the --direct option with the firewall-cmd tool. A few examples are presented here. See the firewall-cmd(1) man page for more information.
The direct interface mode is intended for services or applications to add specific firewall rules during runtime. The rules can be made permanent by adding the --permanent option using the firewall-cmd --permanent --direct command or by modifying /etc/firewalld/direct.xml. See man firewalld.direct(5) for information on the /etc/firewalld/direct.xml file.


To add a rule to the “IN_public_allow” chain, enter the following command as root:
firewall-cmd --direct --add-rule ipv4 filter IN_public_allow   0 -m tcp -p tcp --dport 666 -j ACCEPT
Add the --permanent option to make the setting persistent.

To remove a rule from the “IN_public_allow” chain, enter the following command as root:
firewall-cmd --direct --remove-rule ipv4 filter IN_public_allow  0 -m tcp -p tcp --dport 666 -j ACCEPT

To list the rules in the “IN_public_allow” chain, enter the following command as root:
firewall-cmd --direct --get-rules ipv4 filter IN_public_allow
Note that this command (the --get-rules option) only lists rules previously added using the --add-rule option. It does not list existing iptables rules added by other means.

With the “rich language” syntax, complex firewall rules can be created in a way that is easier to understand than the direct-interface method
All the commands in this section need to be run as root. The format of the command to add a rule is as follows:
firewall-cmd [--zone=zone] --add-rich-rule='rule' [--timeout=timeval]

To remove a rule:
firewall-cmd [--zone=zone] --remove-rich-rule='rule'

To check if a rule is present:
firewall-cmd [--zone=zone] --query-rich-rule='rule'

The format or structure of the rich rule commands is as follows:
rule [family="rule family"]
    [ source [NOT] [address="address"] [mac="mac-address"] [ipset="ipset"] ]
    [ destination [NOT] address="address" ]
    [ element ]
    [ log [prefix="prefix text"] [level="log level"] [limit value="rate/duration"] ]
    [ audit ]
    [ action ]

New IPv6 connections from 1:2:3:4:6:: for protocol RADIUS are all rejected and logged at a rate of 3 per minute. New IPv6 connections from other sources are accepted:
rule family="ipv6" source address="1:2:3:4:6::" service name="radius" log prefix="dns" level="info" limit value="3/m" reject
rule family="ipv6" service name="radius" accept

rule family="ipv4" source address="192.168.2.2" accept

FIREWALL LOCKDOWN
Local applications or services are able to change the firewall configuration if they are running as root (for example, libvirt). With this feature, the administrator can lock the firewall configuration so that either no applications or only applications that are added to the lockdown whitelist are able to request firewall changes. The lockdown settings default to disabled. If enabled, the user can be sure that there are no unwanted configuration changes made to the firewall by local applications or services.
localdown is  laying on selinux

/etc/firewalld/firewalld.conf 
Lockdown=yes
Reload the firewall using the following command as root:
firewall-cmd --reload

To enable the use of firewall-cmd, enter the following command as root:
firewall-cmd --add-lockdown-whitelist-command='/usr/bin/python -Es /usr/bin/firewall-cmd*'
Add the --permanent option if you want to make it persistent.


Configuring IP Set options with the Command-Line Client
To list the IP sets known to firewalld in the permanent environment, use the following command as root:
firewall-cmd --permanent --get-ipsets

To add a new IP set, use the following command using the permanent environment as root:
firewall-cmd --permanent --new-ipset=test --type=hash:net
The previous command creates a new IP set with the name test and the hash:net type for IPv4. To create an IP set for use with IPv6, add the --option=family=inet6 option. To make the new setting effective in the runtime environment, reload firewalld. List the new IP set with the following command as root:
firewall-cmd --permanent --get-ipsets

To get more information about the IP set, use the following command as root:
firewall-cmd --permanent --info-ipset=test

Note that the IP set does not have any entries at the moment. To add an entry to the test IP set, use the following command as root:
firewall-cmd --permanent --ipset=test --add-entry=192.168.0.1

 To get the list of current entries in the IP set, use the following command as root:
firewall-cmd --permanent --ipset=test --get-entries

To add the addresses from the iplist.txt file, use the following command as root:
firewall-cmd --permanent --ipset=test --add-entries-from-file=iplist.txt

To remove the addresses from the IP set and to check the updated entries list, use the following commands as root:
firewall-cmd --permanent --ipset=test --remove-entries-from-file=iplist.txt

You can add the IP set as a source to a zone to handle all traffic coming in from any of the addresses listed in the IP set with a zone. For example, to add the test IP set as a source to the drop zone to drop all packets coming from all entries listed in the test IP set, use the following command as root:
firewall-cmd --permanent --zone=drop --add-source=ipset:test

Configuring Lockdown with the Command-Line Client
firewall-cmd --query-lockdown
firewall-cmd --lockdown-on
firewall-cmd --lockdown-off
firewall-cmd --list-lockdown-whitelist-commands


CONFIGURING LOGGING FOR DENIED PACKETS
To list the actual LogDenied setting with firewall-cmd, use the following command as root:
firewall-cmd --get-log-denied 

To change the LogDenied setting, use the following command as root:
firewall-cmd --set-log-denied=all





IPTABLES AND IP SETS
The use of ipset enables iptables commands, such as those below, to be replaced by a set:
iptables -A INPUT -s 10.0.0.0/8 -j DROP
iptables -A INPUT -s 172.16.0.0/12 -j DROP
iptables -A INPUT -s 192.168.0.0/16 -j DROP
The set is created as follows:
ipset create my-block-set hash:net
ipset add my-block-set 10.0.0.0/8
ipset add my-block-set 172.16.0.0/12
ipset add my-block-set 192.168.0.0/16
The set is then referenced in an iptables command as follows:
iptables -A INPUT -m set --set my-block-set src -j DROP

To use IP sets with firewalld, a permanent direct rule is required to reference the set, and a custom service must be created and started before firewalld starts for every ipset. You can add permanent direct rules with the /etc/firewalld/direct.xml file.
Configure a custom service to create and load the IP set structure before firewalld starts.
1.vi /etc/systemd/system/ipset_name.service
[Unit]
Description=ipset_name
Before=firewalld.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/ipset_name.sh start
ExecStop=/usr/local/bin/ipset_name.sh stop

[Install]
WantedBy=basic.target

2.Use the IP set permanently in firewalld:
vi /etc/firewalld/direct.xml
<?xml version="1.0" encoding="utf-8"?>
<direct>
   <rule ipv="ipv4" table="filter" chain="INPUT" priority="0">-m set
--match-set <replaceable>ipset_name</replaceable> src -j DROP</rule>
</direct>

3.A firewalld reload is required to activate the changes:
firewall-cmd --reload


ipset
ipset [options] command [command-options]
Where command is one of:
create | add | del | test | destroy | list | save | restore | flush | rename | swap | help | version | - 

Allowed options are:
-exist | -output [ plain | save | xml ] | -quiet | -resolve | -sorted | -name | -terse

The format of the create command is as follows:
ipset create set-name type-name [create-options]

The set-name is a suitable name chosen by the user, the type-name is the name of the data structure used to store the data comprising the set. The format of the type-name is as follows:
method:datatype[,datatype[,datatype]]

The allowed methods for storing data are:
 bitmap | hash | list 

The allowed data types are:
ip | net | mac | port | iface 

When adding, deleting, or testing entries in a set, the same comma separated data syntax must be used for the data that makes up one entry, or element, in the set. For example:
ipset add set-name ipaddr,portnum,ipaddr

To create an IP set consisting of a source IP address, a port, and destination IP address, run a command as follows:
ipset create my-set hash:ip,port,ip

Once the set is created, entries can be added as follows:
ipset add my-set 192.168.1.2,80,192.168.2.2

To list the contents of a specific IP Set, my-set, run a command as follows:
ipset list my-set

Listing the contents of large sets is time consuming. You can test for the existence of an element as follows:
ipset test my-set 192.168.1.2,80,192.168.2.2

IP Set Types
bitmap:ip
Stores an IPv4 host address, a network range, or an IPv4 network addresses with the prefix-length in CIDR notation if the netmask option is used when the set is created. It can optionally store a timeout value, a counter value, and a comment. It can store up to 65536 entries. The command to create the bitmap:ip set has the following format:
ipset create set-name range start_ipaddr-end_ipaddr |ipaddr/prefix-length [netmask prefix-length] [timeout value] [counters] [comment]

To create an IP set for a range of addresses using a prefix length, make use of the bitmap:ip set type as follows:
ipset create my-range bitmap:ip range 192.168.33.0/28 timeout 3600    #timeout可以设置条目过期时间
ipset add my-range 192.168.33.1 
ipset add my-range 192.168.33.2-192.168.33.4

To create an IP set for a range of address using a netmask, make use of the bitmap:ip set type as follows:
ipset create my-big-range bitmap:ip range 192.168.124.0-192.168.126.0 netmask 24
ipset add my-big-range 192.168.124.0
If you attempt to add an address, the range containing that address will be added:
ipset add my-big-range 192.168.125.150

bitmap:ip,mac
Stores an IPv4 address and a MAC address as a pair. It can store up to 65536 entries.
ipset create my-range bitmap:ip,mac range start_ipaddr-end_ipaddr | ipaddr/prefix-length [timeout value ] [counters] [comment]
To create an IP set for a range of IPv4 MAC address pairs, make use of the bitmap:ip,mac set type as follows:
ipset create my-range bitmap:ip,mac range 192.168.1.0/24
It is not necessary to specify a MAC address when creating the set.
ipset add my-range 192.168.1.1,12:34:56:78:9A:BC


bitmap:port
Stores a range of ports. It can store up to 65536 entries.
ipset create my-port-range bitmap:port range start_port-end_port [timeout value ] [counters] [comment]
ipset create my-permitted-port-range bitmap:port range 1024-49151
ipset add my-permitted-port-range 5060-5061


hash:ip
Stores a host or network address in the form of a hash. By default, an address specified without a network prefix length is a host address. The all-zero IP address cannot be stored.
ipset create my-addresses hash:ip [family[ inet | inet6 ]] [hashsize value] [maxelem value ] [netmask prefix-length] [timeout value ]
The inet family is the default, if family is omitted addresses will be interpreted as IPv4 addresses. The hashsize value is the initial hash size to use and defaults to 1024. The maxelem value is the maximum number of elements which can be stored in the set, it defaults to 65536.

To create an IP set for IP addresses, make use of the hash:ip set type as follows:
ipset create my-addresses hash:ip
ipset add my-addresses 10.10.10.0

If additional options such as netmask and timeout are required, they must be specified when the set is created. For example:
ipset create my-busy-addresses hash:ip maxelem 24 netmask 28 timeout 100

The maxelem option restricts to total number of elements in the set, thus conserving memory space.
The timeout option means that elements will only exist in the set for the number of seconds specified. For example:
ipset add my-busy-addresses 192.168.60.0 timeout 100
The element will be removed from the set when the timeout period ends.



configure a server as roiuter with firewalld
1.Enable IPv4 packet forwarding.
Add the following to /etc/sysctl.conf: net.ipv4.ip_forward = 1
Apply the sysctl settings: sysctl -p
2.Add direct rules to firewalld. Add the --permanent option to keep these rules across restarts.
firewall-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -o eth_ext -j MASQUERADE
firewall-cmd --direct --add-rule ipv4 filter FORWARD 0 -i eth_int -o eth_ext -j ACCEPT
firewall-cmd --direct --add-rule ipv4 filter FORWARD 0 -i eth_ext -o eth_int -m state --state RELATED,ESTABLISHED -j ACCEPT
