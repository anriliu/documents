prepare os configurations b4 production:
vm.max_map_count=262144 #must higher than this

Disable swap:
swapoff -a or set vm.swappiness=1

and also increase ulimit nofile

condigurations in elasticsearch.yml:
discovery.zen.ping.unicast.hosts: 192.168.168.21:32701  #cluster peer ip and port,default port is transport.tcp.port 9300
cluster.name=: mynewclustername   #cluster name
xpack.security.enabled: false #disable security
discovery.zen.minimum_master_nodes: 1
network.bind_host: 127.0.0.1  #this is for http api port
transport.bind_host: 0.0.0.0  #this is for communication between nodes within cluster
cluster中的任何一个node接收http请求后，如果数据不在本地，就会通过transport module来和其它node沟通获取数据。
一个node可以作为一个或者几个角色同时存在cluster中,默认都是true,在大规模集群上最好是分开:
node.master: true #用来参加master选举, master is responsible for creating or deleting an index, tracking which nodes are part of the cluster, and deciding which shards to allocate to which nodes.
node.data: true  #用来保存数据
node.ingest: true #用来产生index之前预处理文档
node.tribe #在elasticsearch7会被取消，可以用cross cluster search 代替

search.remote.connect: false  #Disable cross-cluster search (enabled by default).
所有role 的node都可以作为coordinating nodes这一功能是不能关闭的.
Requests like search requests or bulk-indexing requests may involve data held on different data nodes.A search request, for example, is executed in two phases which are coordinated by the node which receives the client request — the coordinating node.
In the scatter phase, the coordinating node forwards the request to the data nodes which hold the data. Each data node executes the request locally and returns its results to the coordinating node. In the gather phase, the coordinating node reduces each data node’s results into a single global resultset.

View Cluster status:
curl -XGET "192.168.1.101:9200/_cat/heath?v"

View nodes detail in cluster:
curl -XGET "192.168.1.101:9200/_cat/nodes?v"

View All Indexes:
curl -XGET "192.168.1.101:9200/_cat/indices?v"


Create index with mapping and settings:
curl -XPUT "192.168.1.101:9200/index_test?pretty"  -H 'Content-Type: application/json' -d ' # 注意这里的'号
{
  "settings": {
    "index": {
      "number_of_replicas": "1", # 设置复制数
      "number_of_shards": "5" # 设置主分片数
    }
  },
  "mappings": { # 创建mapping
    "test_type": { # 在index中创建一个新的type(相当于table)
      "properties": {
        "name": { # 创建一个字段（string类型数据，使用普通索引）
          "type": "string",
          "index": "not_analyzed"
        },
        "age": {
          "type": "integer"
        }
      }
    }
  }
}'
You can also create pre-define mapping of index by create configuration file at $ES_HOME/config/mapping/index_name/type_name.json with below content:

{
  "test_type": { # 注意，这里的test_type与json文件名必须一致
      "properties": {
        "name": {
          "type": "string",
          "index": "not_analyzed"
        },
        "age": {
          "type": "integer"
        }
      }
    }
  }

then curl -XPUT "192.168.1.101:9200/index_test" # 注意，这里的索引名必须与mappings下新建的index_test目录名一致



View mapping:
curl -XGET 'localhost:9200/index_test/_mapping/test_type'

Delete mapping:
curl -XDELETE 'localhost:9200/index_test/_mapping/test_type'

Delete index:
curl -XDELETE "192.168.1.101:9200/index_test"

Add a document:
curl -XPUT '192.168.1.101:9200/index_test/test_type/1?pretty' -d ' # 这里的pretty参数的作用是使得返回的json显示地更加好看。1是文档的id值（唯一键）。
{
    "name": "zhangsan",
    "age" : "12"
}'

View document:
curl -XGET '192.168.1.101:9200/index_test/test_type/1?pretty'


Update a document:
curl -XPOST '192.168.1.101:9200/index_test/test_type/1?pretty' -d ' # 这里的1必须是索引中已经存在id，否则就会变成新增文档操作
{
    "name": "lisi",
    "age" : "12"
}'

View Cluster status:
curl -XGET '192.168.168.101:9200/_cluster/health?pretty
http://192.168.168.21:32600/_cluster/health?pretty





run elasticsearch in docker:
#!/bin/bash
#first_port1=32600 first_port2=32601 second_port1=32700 second_port2=32701 first_dpath=/tmp/es601 second_dpath=/tmp/es701 clustername=ozcluster
eval $@

if  [[ -n clustername && -n $first_port1 && -n $first_port2 && -n $second_port1 && -n $second_port2 && -n $first_dpath && -n $second_dpath ]] 
then
:
else
echo "This script will run two nodes elasticsearch cluster on single physical host with docker so you have to pre-define the data path and expose port for each docker container
Usage: ./$0 first_port1=http_port2 first_port2=transport_port2 second_port1=http_port2 second_port2=transport_port2 first_dpath=fulldatapath1 second_dpath=fulldatapath2 clustername=cluster_name "&&exit 1
fi

test `ss -tl src  :$first_port1 or src :$first_port2 or src :$second_port1 or src :$second_port2|wc -l` -eq 1||{ echo pls specify non-listening ports&&exit ;}

docker run -d -e "cluster.name=$clustername" -e "xpack.security.enabled=false" -e "ES_JAVA_OPTS=-Xms2048m -Xmx2048m" -v $first_dpath:/usr/share/elasticsearch/data  -e "discovery.zen.ping.unicast.hosts=localhost:${second_port2}" -p ${first_port1}:9200 -p ${first_port2}:9300  docker.elastic.co/elasticsearch/elasticsearch:5.5.1
docker run -d  -e "cluster.name=$clustername" -e "xpack.security.enabled=false" -e "ES_JAVA_OPTS=-Xms2048m -Xmx2048m" -v ${second_dpath}:/usr/share/elasticsearch/data  -e "discovery.zen.ping.unicast.hosts=localhost:${first_port2}" -p ${second_port1}:9200 -p ${second_port2}:9300  docker.elastic.co/elasticsearch/elasticsearch:5.5.1






nginx通过lua脚本认证:
#     $ printf "nobody:$(openssl passwd -apr1 nobody)\n" >> passwords
#     $ printf "all:$(openssl passwd -apr1 all)\n"       >> passwords
#     $ printf "user:$(openssl passwd -apr1 user)\n"     >> passwords
#     $ printf "admin:$(openssl passwd -apr1 admin)\n"   >> passwords
nginx_authorize_by_lua.conf
worker_processes  1;

error_log logs/lua.log notice;

events {
  worker_connections 1024;
}

http {
  upstream elasticsearch {
    server 127.0.0.1:9200;
    keepalive 15;
  }

  server {
    listen 8080;

    location / {
      auth_basic           "Protected Elasticsearch";
      auth_basic_user_file passwords;

      access_by_lua_file '../authorize.lua';

      proxy_pass http://elasticsearch;
      proxy_redirect off;
      proxy_buffering off;

      proxy_http_version 1.1;
      proxy_set_header Connection "Keep-Alive";
      proxy_set_header Proxy-Connection "Keep-Alive";
    }

  }
}

authorize.lua:
-- authorization rules

local restrictions = {
  all  = {
    ["^/$"]                             = { "HEAD" }
  },

  user = {
    ["^/$"]                             = { "GET" },
    ["^/?[^/]*/?[^/]*/_search"]         = { "GET", "POST" },
    ["^/?[^/]*/?[^/]*/_msearch"]        = { "GET", "POST" },
    ["^/?[^/]*/?[^/]*/_validate/query"] = { "GET", "POST" },
    ["/_aliases"]                       = { "GET" },
    ["/_cluster.*"]                     = { "GET" }
  },

  admin = {
    ["^/?[^/]*/?[^/]*/_bulk"]          = { "GET", "POST" },
    ["^/?[^/]*/?[^/]*/_refresh"]       = { "GET", "POST" },
    ["^/?[^/]*/?[^/]*/?[^/]*/_create"] = { "GET", "POST" },
    ["^/?[^/]*/?[^/]*/?[^/]*/_update"] = { "GET", "POST" },
    ["^/?[^/]*/?[^/]*/?.*"]            = { "GET", "POST", "PUT", "DELETE" },
    ["^/?[^/]*/?[^/]*$"]               = { "GET", "POST", "PUT", "DELETE" },
    ["/_aliases"]                      = { "GET", "POST" }
  }
}

-- get authenticated user as role
local role = ngx.var.remote_user
ngx.log(ngx.DEBUG, role)

-- exit 403 when no matching role has been found
if restrictions[role] == nil then
  ngx.header.content_type = 'text/plain'
  ngx.log(ngx.WARN, "Unknown role ["..role.."]")
  ngx.status = 403
  ngx.say("403 Forbidden: You don\'t have access to this resource.")
  return ngx.exit(403)
end

-- get URL
local uri = ngx.var.uri
ngx.log(ngx.DEBUG, uri)

-- get method
local method = ngx.req.get_method()
ngx.log(ngx.DEBUG, method)

local allowed  = false

for path, methods in pairs(restrictions[role]) do

  -- path matched rules?
  local p = string.match(uri, path)

  local m = nil

  -- method matched rules?
  for _, _method in pairs(methods) do
    m = m and m or string.match(method, _method)
  end

  if p and m then
    allowed = true
    ngx.log(ngx.NOTICE, method.." "..uri.." matched: "..tostring(m).." "..tostring(path).." for "..role)
    break
  end
end

if not allowed then
  ngx.header.content_type = 'text/plain'
  ngx.log(ngx.WARN, "Role ["..role.."] not allowed to access the resource ["..method.." "..uri.."]")
  ngx.status = 403
  ngx.say("403 Forbidden: You don\'t have access to this resource.")
  return ngx.exit(403)
end
